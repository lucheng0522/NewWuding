// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.i5d5.wuding.WD.View.Activity;

import com.i5d5.basemodule.Utils.SPUtils;
import com.i5d5.wuding.MDI.MModule.ClassModule;
import com.i5d5.wuding.WD.Presenter.ClassPresenter;
import dagger.MembersInjector;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class ClassActivity_MembersInjector implements MembersInjector<ClassActivity> {
  private final Provider<ClassPresenter> classPresenterProvider;

  private final Provider<ClassModule> classModuleProvider;

  private final Provider<SPUtils> spUtilsProvider;

  private final Provider<Retrofit> retrofitProvider;

  public ClassActivity_MembersInjector(
      Provider<ClassPresenter> classPresenterProvider,
      Provider<ClassModule> classModuleProvider,
      Provider<SPUtils> spUtilsProvider,
      Provider<Retrofit> retrofitProvider) {
    assert classPresenterProvider != null;
    this.classPresenterProvider = classPresenterProvider;
    assert classModuleProvider != null;
    this.classModuleProvider = classModuleProvider;
    assert spUtilsProvider != null;
    this.spUtilsProvider = spUtilsProvider;
    assert retrofitProvider != null;
    this.retrofitProvider = retrofitProvider;
  }

  public static MembersInjector<ClassActivity> create(
      Provider<ClassPresenter> classPresenterProvider,
      Provider<ClassModule> classModuleProvider,
      Provider<SPUtils> spUtilsProvider,
      Provider<Retrofit> retrofitProvider) {
    return new ClassActivity_MembersInjector(
        classPresenterProvider, classModuleProvider, spUtilsProvider, retrofitProvider);
  }

  @Override
  public void injectMembers(ClassActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    instance.classPresenter = classPresenterProvider.get();
    instance.classModule = classModuleProvider.get();
    instance.spUtils = spUtilsProvider.get();
    instance.retrofit = retrofitProvider.get();
  }

  public static void injectClassPresenter(
      ClassActivity instance, Provider<ClassPresenter> classPresenterProvider) {
    instance.classPresenter = classPresenterProvider.get();
  }

  public static void injectClassModule(
      ClassActivity instance, Provider<ClassModule> classModuleProvider) {
    instance.classModule = classModuleProvider.get();
  }

  public static void injectSpUtils(ClassActivity instance, Provider<SPUtils> spUtilsProvider) {
    instance.spUtils = spUtilsProvider.get();
  }

  public static void injectRetrofit(ClassActivity instance, Provider<Retrofit> retrofitProvider) {
    instance.retrofit = retrofitProvider.get();
  }
}
