// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.i5d5.wuding.MDI.MComponent;

import com.i5d5.basemodule.DI.Component.ApplicationComponent;
import com.i5d5.basemodule.Utils.SPUtils;
import com.i5d5.wuding.MDI.MModule.ClassModule;
import com.i5d5.wuding.MDI.MModule.ClassModule_ProvideClasstServiceFactory;
import com.i5d5.wuding.MDI.MModule.WdActivityModule;
import com.i5d5.wuding.MDI.MModule.WdActivityModule_ProvideClassModuleFactory;
import com.i5d5.wuding.WD.Model.Api.ClassApi;
import com.i5d5.wuding.WD.Presenter.ClassPresenter;
import com.i5d5.wuding.WD.Presenter.ClassPresenter_Factory;
import com.i5d5.wuding.WD.View.Activity.ClassActivity;
import com.i5d5.wuding.WD.View.Activity.ClassActivity_MembersInjector;
import com.i5d5.wuding.WD.View.Activity.MainActivity;
import com.i5d5.wuding.WD.View.Activity.MainActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerWdActivityComponent implements WdActivityComponent {
  private Provider<Retrofit> retrofitProvider;

  private Provider<ClassModule> provideClassModuleProvider;

  private Provider<SPUtils> sputilsProvider;

  private DaggerWdActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.retrofitProvider =
        new com_i5d5_basemodule_DI_Component_ApplicationComponent_retrofit(
            builder.applicationComponent);

    this.provideClassModuleProvider =
        DoubleCheck.provider(
            WdActivityModule_ProvideClassModuleFactory.create(builder.wdActivityModule));

    this.sputilsProvider =
        new com_i5d5_basemodule_DI_Component_ApplicationComponent_sputils(
            builder.applicationComponent);
  }

  @Override
  public WdClassComponent wdClassComponent() {
    return new WdClassComponentImpl();
  }

  @Override
  public WdStoreComponent wdStoreComponent() {
    return new WdStoreComponentImpl();
  }

  public static final class Builder {
    private WdActivityModule wdActivityModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public WdActivityComponent build() {
      if (wdActivityModule == null) {
        throw new IllegalStateException(WdActivityModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerWdActivityComponent(this);
    }

    public Builder wdActivityModule(WdActivityModule wdActivityModule) {
      this.wdActivityModule = Preconditions.checkNotNull(wdActivityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }

  private static class com_i5d5_basemodule_DI_Component_ApplicationComponent_retrofit
      implements Provider<Retrofit> {
    private final ApplicationComponent applicationComponent;

    com_i5d5_basemodule_DI_Component_ApplicationComponent_retrofit(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(
          applicationComponent.retrofit(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_i5d5_basemodule_DI_Component_ApplicationComponent_sputils
      implements Provider<SPUtils> {
    private final ApplicationComponent applicationComponent;

    com_i5d5_basemodule_DI_Component_ApplicationComponent_sputils(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public SPUtils get() {
      return Preconditions.checkNotNull(
          applicationComponent.sputils(),
          "Cannot return null from a non-@Nullable component method");
    }
  }

  private final class WdClassComponentImpl implements WdClassComponent {
    private final ClassModule classModule;

    private Provider<ClassApi> provideClasstServiceProvider;

    private Provider<ClassPresenter> classPresenterProvider;

    private MembersInjector<ClassActivity> classActivityMembersInjector;

    private WdClassComponentImpl() {
      this.classModule = new ClassModule();
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideClasstServiceProvider =
          DoubleCheck.provider(
              ClassModule_ProvideClasstServiceFactory.create(
                  classModule, DaggerWdActivityComponent.this.retrofitProvider));

      this.classPresenterProvider =
          ClassPresenter_Factory.create(
              MembersInjectors.<ClassPresenter>noOp(), provideClasstServiceProvider);

      this.classActivityMembersInjector =
          ClassActivity_MembersInjector.create(
              classPresenterProvider,
              DaggerWdActivityComponent.this.provideClassModuleProvider,
              DaggerWdActivityComponent.this.sputilsProvider,
              DaggerWdActivityComponent.this.retrofitProvider);
    }

    @Override
    public void inject(ClassActivity classActivity) {
      classActivityMembersInjector.injectMembers(classActivity);
    }
  }

  private final class WdStoreComponentImpl implements WdStoreComponent {
    private MembersInjector<MainActivity> mainActivityMembersInjector;

    private WdStoreComponentImpl() {
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.mainActivityMembersInjector =
          MainActivity_MembersInjector.create(
              DaggerWdActivityComponent.this.provideClassModuleProvider,
              DaggerWdActivityComponent.this.retrofitProvider,
              DaggerWdActivityComponent.this.sputilsProvider);
    }

    @Override
    public void inject(MainActivity mainActivity) {
      mainActivityMembersInjector.injectMembers(mainActivity);
    }
  }
}
